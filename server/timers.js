// Timeout ve deadline y√∂netimi

const timers = new Map(); // timerId -> setTimeout id

// Deadline timer olu≈ütur
const createDeadlineTimer = (id, duration, callback) => {
  // Mevcut timer'ƒ± temizle
  if (timers.has(id)) {
    clearTimeout(timers.get(id));
  }

  // Yeni timer olu≈ütur
  const timerId = setTimeout(() => {
    timers.delete(id);
    callback();
  }, duration);

  timers.set(id, timerId);

  console.log(`‚è∞ Timer olu≈üturuldu: ${id} (${duration}ms)`);
  return id;
};

// Timer'ƒ± iptal et
const cancelTimer = (id) => {
  if (timers.has(id)) {
    clearTimeout(timers.get(id));
    timers.delete(id);
    console.log(`‚ùå Timer iptal edildi: ${id}`);
    return true;
  }
  return false;
};

// T√ºm timer'larƒ± temizle
const clearAllTimers = () => {
  timers.forEach((timerId) => {
    clearTimeout(timerId);
  });
  timers.clear();
  console.log("üßπ T√ºm timer'lar temizlendi");
};

// Aktif timer sayƒ±sƒ±
const getActiveTimerCount = () => timers.size;

// Varsayƒ±lan s√ºre deƒüerleri (ms)
const TIMEOUTS = {
  GUESS_WINDOW: 60000, // 60 saniye tahmin s√ºresi
  VOTING_WINDOW: 30000, // 30 saniye oylama s√ºresi
  RECONNECT_GRACE: 10000, // 10 saniye reconnect s√ºresi
  ROUND_TRANSITION: 5000, // 5 saniye round ge√ßi≈ü s√ºresi
};

module.exports = {
  createDeadlineTimer,
  cancelTimer,
  clearAllTimers,
  getActiveTimerCount,
  TIMEOUTS,
};

